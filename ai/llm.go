package ai

import (
	"context"
	"fmt"
	"strings"

	"github.com/google/generative-ai-go/genai"
	"google.golang.org/api/option"
)

type LLMService interface {
	GenerateContent(ctx context.Context, parts ...genai.Part) (*genai.GenerateContentResponse, error)
}

type GeminiService struct {
	model *genai.GenerativeModel
}

func NewGeminiService(ctx context.Context, apiKey string) (*GeminiService, error) {
	client, err := genai.NewClient(ctx, option.WithAPIKey(apiKey))
	if err != nil {
		return nil, fmt.Errorf("error creating Gemini API client: %w", err)
	}

	model := client.GenerativeModel("gemini-2.0-flash")
	model.SetTemperature(0.1)

	return &GeminiService{model: model}, nil
}

func (s *GeminiService) GenerateContent(ctx context.Context, parts ...genai.Part) (*genai.GenerateContentResponse, error) {
	resp, err := s.model.GenerateContent(ctx, parts...)
	if err != nil {
		return nil, fmt.Errorf("failed to generate content with Gemini model: %w", err)
	}
	return resp, nil
}

type jsonResponseParser struct{}

func NewJSONResponseParser() *jsonResponseParser {
	return &jsonResponseParser{}
}

func (p *jsonResponseParser) Parse(rawResponse *genai.GenerateContentResponse) (string, error) {
	if rawResponse == nil || len(rawResponse.Candidates) == 0 || len(rawResponse.Candidates[0].Content.Parts) == 0 {
		return "", fmt.Errorf("LLM returned no candidates or no content")
	}

	rawLLMResponse := fmt.Sprint(rawResponse.Candidates[0].Content.Parts[0])

	cleanedResponse := strings.TrimSpace(rawLLMResponse)
	cleanedResponse = strings.TrimPrefix(cleanedResponse, "```json")
	cleanedResponse = strings.TrimSuffix(cleanedResponse, "```")
	cleanedResponse = strings.TrimSpace(cleanedResponse)

	return cleanedResponse, nil
}

type textResponseParser struct{}

func NewTextResponseParser() *textResponseParser {
	return &textResponseParser{}
}

func (p *textResponseParser) Parse(rawResponse *genai.GenerateContentResponse) (string, error) {
	if rawResponse == nil || len(rawResponse.Candidates) == 0 || len(rawResponse.Candidates[0].Content.Parts) == 0 {
		return "", fmt.Errorf("no content generated by LLM")
	}

	var sb strings.Builder
	for _, part := range rawResponse.Candidates[0].Content.Parts {
		if text, ok := part.(genai.Text); ok {
			sb.WriteString(string(text))
		}
	}
	return sb.String(), nil
}
